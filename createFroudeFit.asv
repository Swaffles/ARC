function [fitresult, gof] = createFroudeFit(x, y)
%CREATEFIT(X,Y)
%  Create a fit.
%
%  Data for 'curvefit' fit:
%      X Input: x
%      Y Output: y
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 31-Jan-2023 09:55:13


%% Fit: 'curvefit'.
[xData, yData] = prepareCurveData( x, y );

% Set up fittype and options.
ft = fittype( 'poly2' );
%excludedPoints = yData < -0.03; %this is just a guess right now
%B = rmoutliers([xData,yData],'median');
%xData = B(:,1);
%yData = B(:,2);
opts = fitoptions( 'Method', 'LinearLeastSquares','Robust','LAR');
%opts.Exclude = excludedPoints;

% Fit model to data.
initFit = fit( xData, yData, ft, opts);
fdata = feval(initFit,xData);
outliers = abs(fdata-yData) > 1.5*std(yData);
opts.Exclude = outliers;
points = findobj(gca,'Type','scatter');
xDataClean = xData(~outliers);
yDataClean = yData(~outliers);
points.XData = xDataClean;
points.YData = yDataClean;


[fitresult, gof] = fit(xData, yData, ft, opts);
RSEME = gof.rmse;
coeffs = coeffvalues(fitresult);
eqnStr = sprintf('y = %.2fx^2+%.2fx+%.2f,\n RMSE=%.2e',coeffs(1),coeffs(2),coeffs(3),RSEME);
%eqnStr = sprintf('y = %.2fx^3+%.2fx^2+%.2fx+%.2f,\n RMSE=%.2e',coeffs(1),coeffs(2),coeffs(3),coeffs(4),RSEME);

% Plot fit with data.
%predFunc if you want error bounds for the function fit
%predObs if you want error bounds for the next observation
h = plot(fitresult, 'predFunc'); 

lines = findobj(h,'Type','Line');
set(lines(3),'Color',[0 0 0],'Linewidth',1,'DisplayName', '95% Upper Bound');
set(lines(2),'Color',[0 0 0],'Linewidth',1, 'DisplayName','95% Lower Bound');
set(lines(1),'Color',[0 0 0],'Linewidth',1, 'DisplayName',eqnStr);



