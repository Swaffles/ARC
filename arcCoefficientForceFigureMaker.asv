function arcCoefficientForceFigureMaker(data,index,Label,barelabel,depthBased,forces,length_Scale,makeTiles,excludeShallow)
%Inputs:
%ARC: data set containing all the necessary data for plotting
%index: Y-axis item
%label: Y-axis title
%barelabel: label w/o units
%depthBased: tells whether to use depth based or volume based Froude #
%forces: tells nondimensional part how to handle the nondimensionalization
%length scale: used for non dimensionalization

%Ydata = (data, water depth, heading, steering, flow speed)

rho = 1000; %water density
gravity = 9.81; %acceleration due to gravity
wheelDiameter = 25.4; %wheel diameter

YELLOW = [221/255 170/255 51/255];
BLUE = [0/255 68/255 136/255];
RED = [187/255 85/255 102/255];

%number of items to loop over
fields = fieldnames(data);
if excludeShallow
    %remove all trials with h/D = 0.2 from fields
    temp = fields;
    for i=1:length(fields)
        indx = data.(temp{i}){19,2} == 0.2
        if indx
            indf = find(strcmp(fields,temp{i}));
            fields(indf) = [];
        end
    end
end
    for i=1:length(fields)
        yData(i,1) = data.(fields{i})(index,2); %main Y-axis variable
        yData(i,2) = data.(fields{i})(13,2); %water depth cm
        yData(i,3) = data.(fields{i})(15,2); %heading
        yData(i,4) = data.(fields{i})(16,2); %steering
        temp = data.(fields{i}){17,2}/100; %flow speed m/s
        yData(i,5) = {temp};
        yData(i,6) = data.(fields{i})(18,2); %target flow speed
        yData(i,7) = data.(fields{i})(19,2); %h/D
    end
    yData.Properties.VariableNames = [barelabel,"Water Depth","Heading",...
        "Steering","Flow Speed",'Target Flow Speed','h/D'];
   
    %nondimensionalization
    if forces
        for i=1:height(yData)
            %depth
            depth = yData{i,"Water Depth"}/100; %get target depth in m
            if depthBased
                %depth Fr
                Fr = yData{i,"Flow Speed"}/(sqrt(gravity*depth)); %real speed yData{i,5}
                Sr = depth/(length_Scale^1/3);
            else
                %displacement Fr
                Fr = yData{i,"Flow Speed"}/(sqrt(gravity*length_Scale^1/3));
                Sr = (length_Scale^1/3)/depth;
            end
            %scaling Fr
            FrSr = Fr*sqrt(Sr);
            yData(i,8) = {round(FrSr,2,"significant")};
            yData{i,1} = yData{i,1}/(0.5*rho*yData{i,5}^2*length_Scale^(2/3)*Sr^2);
        end
        label = strcat(barelabel,'/','$\frac{1}{2}*\rho*U^2*Vol^{2/3}*SR^2$');
    else
        for i=1:height(yData)
            %depth
            depth = yData{i,"Water Depth"}/100; %get target depth in m
            if depthBased
                %depth Fr
                Fr = yData{i,"Flow Speed"}/(sqrt(gravity*depth)); %real speed yData{i,5}
                Sr = depth/(length_Scale^1/3);
            else
                %displacement Fr
                Fr = yData{i,"Flow Speed"}/(sqrt(gravity*length_Scale^1/3));
                Sr = (length_Scale^1/3)/depth;
            end
            %scaling Fr
            FrSr = Fr*sqrt(Sr);
            yData(i,8) = {round(FrSr,2,"significant")};
            yData{i,1} = yData{i,1}/(0.5*rho*yData{i,5}^2*length_Scale*Sr^2);
        end
        label = strcat(barelabel,'/','$\frac{1}{2}*\rho*U^2*Vol*SR^2$');
    end
    
    yData.Properties.VariableNames = [barelabel,"Water Depth","Heading",...
    "Steering","Flow Speed",'Target Flow Speed','h/D','Fr'];
  
    %Collect data by heading to graph
    if makeTiles
        tile = tiledlayout(3,3);
        Steering = unique(yData{:,"Steering"}); %unique steering
        M = unique(yData{:,"Heading"}); %unique headings
        lineColors = lines(length(M));
        counter = 1;
        lineColorsCounter = 0;
        yData1{1,4} = []; %cols == diff depth
        for i = 1:length(M)
            indH = yData{:,"Heading"} == M(i);
            yData1{i} = yData(indH,:); %place current steering into next yData1 table
            m = unique(yData1{i}{:,"Steering"}); %unique headings
            %m = sort(m,"descend");
            nexttile;
                for k=1:length(m)
                    %depth
                    lineColorsCounter = lineColorsCounter+1;
                    indn = yData1{i}{:,"Steering"} == m(k);
                    yData3{counter} = yData1{i}(indn,:); %place current depth into new yData3 table 
                    yData3{counter} = sortrows(yData3{counter},'Fr');
                    hold on
                    if m(k) == m(1)
                    scatter(yData3{counter},'Fr',barelabel,'filled','Marker','>','MarkerFaceColor',RED,...
                        'DisplayName',strcat({'Steering= '},string(yData3{counter}{1,"Steering"}),"deg"));
                    elseif m(k) == m(2)
                        scatter(yData3{counter},'Fr',barelabel,'filled','Marker','o','MarkerFaceColor',YELLOW,...
                        'DisplayName',strcat({'Steering= '},string(yData3{counter}{1,"Steering"}),"deg"));
                    else
                        scatter(yData3{counter},'Fr',barelabel,'filled','Marker','<','MarkerFaceColor',BLUE,...
                        'DisplayName',strcat({'Steering= '},string(yData3{counter}{1,"Steering"}),"deg"));
                    end
                    
                    counter = counter+1;
                    
                end %end steering for loop
                clear yData3

            title(strcat(Label,{' v. Froude Number for Heading= '},string(yData1{i}{1,"Heading"})));
            if depthBased
                xlabel("Froude Number based on Depth");
            else
                xlabel("Froude Number based on displacement");
            end
            %xticks(0:22.5:max(yData{:,3}));
            ylabel(label,'Interpreter','latex');
            hold off
            lineColorsCounter = 0;
        end %end depth for loop
        tiledLegend = legend('NumColumns',1);
        tiledLegend.Layout.Tile = 'south';
        
    else
        %User Selects which Heading angle they want to compare against
        Heading = unique(yData{:,"Heading"});
        [indH,tf] = listdlg('ListString',string(Heading),'SelectionMode','single','PromptString','Select a Heading Angle to Comapre');
        if ~tf
            fprintf("No selection made, exiting function");
            return;
        end
        %User Selects which Steering angles they want to compare against
        Steering = unique(yData{:,"Steering"});
        [indST,tf] = listdlg('ListString',string(Steering),'PromptString','Select a Steering Angle to Comapre');
        if ~tf
            fprintf("No selection made, exiting function");
            return;
        end
        %heading
        indm = yData{:,"Heading"} == Heading(indH);
        yData1 = yData(indm,:);
        n = Steering(indST); %steering selection
        yData2 = cell(size(indST));
        counter = 1;
            for j = 1:length(n)
                %steering
                indn = yData1{:,"Steering"} == n(j);
                yData2{counter} = yData1(indn,:);
                yData2{counter} = sortrows(yData2{counter},'Fr');
                TF = isoutlier(yData2{counter}{:,barelabel},'median');
                yData2{counter}{TF,:} = [];
                hold on
                if n(j) == 0 
                    scatter(yData2{counter},'Fr',barelabel,'filled','Marker','o','MarkerFaceColor',YELLOW,...
                        'SizeData',49,'DisplayName',strcat({'Steering= '},string(yData2{counter}{1,"Steering"}),"^\circ"));
                elseif n(j) == 15 
                    scatter(yData2{counter},'Fr',barelabel,'filled','Marker','<','MarkerFaceColor',BLUE,...
                        'SizeData',49,'DisplayName',strcat({'Steering= '},string(yData2{counter}{1,"Steering"}),"^\circ"));
                else
                    scatter(yData2{counter},'Fr',barelabel,'filled','Marker','>','MarkerFaceColor',RED,...
                        'SizeData',49,'DisplayName',strcat({'Steering= '},string(yData2{counter}{1,"Steering"}),"^\circ"));
                end
                counter = counter+1;
            end %end steering for loop
        title(strcat(Label,' v. Froude Number at Heading ',string(Heading(indH)),'^\circ'),'Interpreter','tex');
        legend('Location','southoutside','NumColumns',j,"Interpreter","tex");
        createFroudeFit(yData2{:}{:,"Fr"},yData2{:}{:,barelabel});
        ylabel(label,'Interpreter','latex');
        if depthBased
            xlabel("Froude Number based on Depth");
        else
            xlabel("Froude Number based on displacement");
        end
        xticks(0:0.2:max(yData{:,8}));
        grid on
        hold off
    end %end makeTiles else
end %end function